spring.application.name=api-gateway
server.port=8888

zuul.host.connect-timeout-millis=15000
zuul.host.socket-timeout-millis=6000



#关闭重试机制
#zuul.retryable=false
#zuul.routes.<route>.retryable=false
#路由转发请求的超时时间
ribbon.ReadTimeout=6000
#转发路由时，创建请求连接的超时时间
ribbon.ConnectTimeout=2000
#转发请求的HystrixCommand执行超时时间。当路由转发请求的命令执行时间超过该配置值后，会标记TIMEOUT并抛出异常
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=20000
#当ConnectTimeout<timeoutInMilliseconds时，若路由请求出现连接超时，会自动进行重试路由请求
#当ConnectTimeout>timeoutInMilliseconds时，若路由请求出现连接超时，不会进行重试路由请求。
#如果路由转发请求发生超时（连接超时或处理超时），只要超时时间的设置小于Hystrix的命令超时时间，就会自动发起重试



#传统路由配置
#zuul.routes.<路由名>.path=/api-a-url/**
#zuul.routes.<路由名>.url=http://localhost:8080/
#多实例配置
#zuul.routes.<路由名>.serviceId=<手工命名>
#<手工命名>.ribbon.listOfServers=url1,url2
#否则配置的serviceId获取不到对应实例的清单
#ribbon.eureka.enabled=false


#服务路由配置
#默认情况下，所有eureka的服务都会被zuul自动的创建映射关系来进行路由
#设置一个服务名匹配表达式来定义不自动创建路由的规则
#zuul.ignored-services=*

#ignored-patterns： /api-user/hello/将不被路由
#http://localhost:8888/mixapp/api-hello/hello
#Mapped to ResourceHttpRequestHandler ["classpath:/META-INF/resources/", "classpath:/resources/", "classpath:/static/", "classpath:/public/", "/"]
zuul.ignored-patterns=/**/hello/**
#网关上的路由规则全部都增加/mixapp
zuul.prefix=/mixapp

zuul.routes.api-user.path=/api-user/**
zuul.routes.api-user.service-id=demo-user
#zuul.routes.demo-user=/api-user/**
zuul.routes.api-feign.path=/api-feign/**
zuul.routes.api-feign.service-id=feign-consumer
zuul.routes.api-hello.path=/api-hello/**
zuul.routes.api-hello.service-id=demo-hello
#?-匹配单个字符；*-匹配任意数量字符，不支持多级目录；**-匹配任意数量字符，支持多级字符
eureka.client.service-url.defaultZone=http://peer1:1111/eureka/

#对指定路由开启自定义敏感头
#zuul.routes.<route>.custom-sensitive-headers=true
#将指定路由的自定义敏感头设置为空，实现Cookie的传递
#zuul.routes.<route>.sensitive-headers=

#禁用指定过滤器
#zuul.<filterClassName>.<filterType>.disable=true

#重定向跳转时，没有将最初的Host信息设置正确
#进行路由转发前为请求设置Host头信息，标识最初的服务端请求地址
zuul.add-host-header=true
logging.level.web=debug